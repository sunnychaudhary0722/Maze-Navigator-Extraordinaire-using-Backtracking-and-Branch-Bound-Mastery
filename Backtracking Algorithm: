class BacktrackingMazeSolver:
    def __init__(self, maze):
        self.maze = maze
        self.rows = len(maze)
        self.cols = len(maze[0])

    def is_valid_move(self, x, y):
        return 0 <= x < self.rows and 0 <= y < self.cols and self.maze[x][y] == 0

    def solve(self, x, y):
        if x == self.rows - 1 and y == self.cols - 1:
            return True  # Reached the destination

        if self.is_valid_move(x, y):
            # Mark the current cell as visited
            self.maze[x][y] = 1

            # Explore all possible directions
            if self.solve(x + 1, y) or self.solve(x, y + 1):
                return True

            # If none of the directions lead to the destination, backtrack
            self.maze[x][y] = 0
            return False

        return False


# Example usage for Backtracking Algorithm
maze_backtracking = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0]
]

backtracking_solver = BacktrackingMazeSolver(maze_backtracking)
backtracking_success = backtracking_solver.solve(0, 0)

print(f"Backtracking Algorithm - Success: {backtracking_success}")
